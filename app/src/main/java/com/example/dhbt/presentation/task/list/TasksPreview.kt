package com.example.dhbt.presentation.task.list

import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.filled.Assignment
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.dhbt.domain.model.Category
import com.example.dhbt.domain.model.CategoryType
import com.example.dhbt.domain.model.RecurrenceType
import com.example.dhbt.domain.model.Subtask
import com.example.dhbt.domain.model.Tag
import com.example.dhbt.domain.model.Task
import com.example.dhbt.domain.model.TaskPriority
import com.example.dhbt.domain.model.TaskRecurrence
import com.example.dhbt.domain.model.TaskStatus
import com.example.dhbt.presentation.shared.EmptyStateMessage
import com.example.dhbt.presentation.theme.DHbtTheme
import org.threeten.bp.LocalDate

// –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
object PreviewData {
    val now = System.currentTimeMillis()
    val oneDayMillis = 24 * 60 * 60 * 1000L
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–¥–∞—á–∞—Ö
    val tags = listOf(
        Tag(id = "tag1", name = "–†–∞–±–æ—Ç–∞", color = "#4285F4"),
        Tag(id = "tag2", name = "–õ–∏—á–Ω–æ–µ", color = "#34A853"),
        Tag(id = "tag3", name = "–ó–¥–æ—Ä–æ–≤—å–µ", color = "#FBBC05"),
        Tag(id = "tag4", name = "–°—Ä–æ—á–Ω–æ", color = "#EA4335"),
        Tag(id = "tag5", name = "–í–∞–∂–Ω–æ", color = "#9C27B0"),
        Tag(id = "tag6", name = "–î–æ–º", color = "#795548"),
        Tag(id = "tag7", name = "–£—á–µ–±–∞", color = "#2196F3")
    )

    val categories = listOf(
        Category(
            id = "cat1",
            name = "–†–∞–±–æ—Ç–∞",
            color = "#4CAF50",
            iconEmoji = "üíº",
            type = CategoryType.TASK,
            order = 0
        ),
        Category(
            id = "cat2",
            name = "–õ–∏—á–Ω–æ–µ",
            color = "#2196F3",
            iconEmoji = "üè†",
            type = CategoryType.TASK,
            order = 1
        ),
        Category(
            id = "cat3",
            name = "–£—á–µ–±–∞",
            color = "#FF9800",
            iconEmoji = "üìö",
            type = CategoryType.TASK,
            order = 2
        )
    )
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    val tasks = listOf(
        // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        Task(
            id = "task1",
            title = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
            description = "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç—á–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É",
            categoryId = "cat_work",
            color = "#4285F4",
            creationDate = now - 2 * oneDayMillis,
            dueDate = now + oneDayMillis,
            dueTime = "15:00",
            duration = 120,
            priority = TaskPriority.HIGH,
            status = TaskStatus.ACTIVE,
            eisenhowerQuadrant = 1, // –≤–∞–∂–Ω–æ –∏ —Å—Ä–æ—á–Ω–æ
            estimatedPomodoroSessions = 4,
            subtasks = listOf(
                Subtask(id = "sub1_1", taskId = "task1", title = "–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", isCompleted = true),
                Subtask(id = "sub1_2", taskId = "task1", title = "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", isCompleted = true),
                Subtask(id = "sub1_3", taskId = "task1", title = "–ù–∞–ø–∏—Å–∞—Ç—å –≤—ã–≤–æ–¥—ã", isCompleted = false),
                Subtask(id = "sub1_4", taskId = "task1", title = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é", isCompleted = false)
            ),
            tags = listOf(tags[0], tags[4]) // —Ä–∞–±–æ—Ç–∞, –≤–∞–∂–Ω–æ
        ),
        Task(
            id = "task2",
            title = "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
            description = "–ú–æ–ª–æ–∫–æ, —Ö–ª–µ–±, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, –º—è—Å–æ",
            categoryId = "cat_home",
            creationDate = now - oneDayMillis,
            dueDate = now,
            priority = TaskPriority.MEDIUM,
            status = TaskStatus.ACTIVE,
            eisenhowerQuadrant = 3, // –Ω–µ –≤–∞–∂–Ω–æ, –Ω–æ —Å—Ä–æ—á–Ω–æ
            subtasks = listOf(
                Subtask(id = "sub2_1", taskId = "task2", title = "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", isCompleted = false),
                Subtask(id = "sub2_2", taskId = "task2", title = "–•–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è", isCompleted = false),
                Subtask(id = "sub2_3", taskId = "task2", title = "–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã", isCompleted = false)
            ),
            tags = listOf(tags[5]) // –¥–æ–º
        ),
        Task(
            id = "task3",
            title = "–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞",
            description = "5 –∫–º –ø–æ –ø–∞—Ä–∫—É",
            categoryId = "cat_health",
            color = "#FBBC05",
            creationDate = now - 5 * oneDayMillis,
            dueDate = now, // —Å–µ–≥–æ–¥–Ω—è
            dueTime = "07:00",
            duration = 30,
            priority = TaskPriority.MEDIUM,
            status = TaskStatus.ACTIVE,
            eisenhowerQuadrant = 2, // –≤–∞–∂–Ω–æ, –Ω–æ –Ω–µ —Å—Ä–æ—á–Ω–æ
            tags = listOf(tags[2]), // –∑–¥–æ—Ä–æ–≤—å–µ
            recurrence = TaskRecurrence(
                id = "rec1",
                taskId = "task3",
                type = RecurrenceType.DAILY, // –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
                startDate = now - 10 * oneDayMillis
            )
        ),

        // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        Task(
            id = "task4",
            title = "–û–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞",
            description = "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –≤–æ–¥–∞, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
            categoryId = "cat_home",
            creationDate = now - 3 * oneDayMillis,
            dueDate = now - oneDayMillis, // –≤—á–µ—Ä–∞
            priority = TaskPriority.HIGH,
            status = TaskStatus.COMPLETED,
            completionDate = now - oneDayMillis + 3600000, // –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—á–µ—Ä–∞
            eisenhowerQuadrant = 1,
            tags = listOf(tags[1], tags[3]) // –ª–∏—á–Ω–æ–µ, —Å—Ä–æ—á–Ω–æ
        ),
        Task(
            id = "task5",
            title = "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
            description = "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
            categoryId = "cat_work",
            creationDate = now - 4 * oneDayMillis,
            dueDate = now - 2 * oneDayMillis,
            priority = TaskPriority.HIGH,
            status = TaskStatus.COMPLETED,
            completionDate = now - 2 * oneDayMillis,
            eisenhowerQuadrant = 1,
            subtasks = listOf(
                Subtask(id = "sub5_1", taskId = "task5", title = "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏", isCompleted = true),
                Subtask(id = "sub5_2", taskId = "task5", title = "–°–æ–∑–¥–∞—Ç—å —Å–ª–∞–π–¥—ã", isCompleted = true),
                Subtask(id = "sub5_3", taskId = "task5", title = "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏", isCompleted = true)
            ),
            tags = listOf(tags[0], tags[4]) // —Ä–∞–±–æ—Ç–∞, –≤–∞–∂–Ω–æ
        ),

        // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        Task(
            id = "task6",
            title = "–°—Ç–∞—Ä—ã–π –ø—Ä–æ–µ–∫—Ç: –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            description = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–æ–µ–∫—Ç—É X",
            categoryId = "cat_work",
            creationDate = now - 30 * oneDayMillis,
            dueDate = now - 20 * oneDayMillis,
            priority = TaskPriority.MEDIUM,
            status = TaskStatus.ARCHIVED,
            completionDate = now - 20 * oneDayMillis,
            tags = listOf(tags[0]) // —Ä–∞–±–æ—Ç–∞
        ),

        // –ë—É–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏
        Task(
            id = "task7",
            title = "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥",
            description = "–ü–ª–∞–Ω–æ–≤—ã–π –æ—Å–º–æ—Ç—Ä",
            categoryId = "cat_health",
            creationDate = now - oneDayMillis,
            dueDate = now + 5 * oneDayMillis, // —á–µ—Ä–µ–∑ 5 –¥–Ω–µ–π
            dueTime = "10:30",
            duration = 60,
            priority = TaskPriority.HIGH,
            status = TaskStatus.ACTIVE,
            eisenhowerQuadrant = 2, // –≤–∞–∂–Ω–æ, –Ω–æ –Ω–µ —Å—Ä–æ—á–Ω–æ
            tags = listOf(tags[2], tags[1]) // –∑–¥–æ—Ä–æ–≤—å–µ, –ª–∏—á–Ω–æ–µ
        ),
        Task(
            id = "task8",
            title = "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω—É",
            description = "–ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫—É—Ä—Å—É Android-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
            categoryId = "cat_education",
            color = "#2196F3",
            creationDate = now - 15 * oneDayMillis,
            dueDate = now + 10 * oneDayMillis,
            priority = TaskPriority.HIGH,
            status = TaskStatus.ACTIVE,
            eisenhowerQuadrant = 2,
            estimatedPomodoroSessions = 10,
            subtasks = listOf(
                Subtask(id = "sub8_1", taskId = "task8", title = "Kotlin –æ—Å–Ω–æ–≤—ã", isCompleted = true),
                Subtask(id = "sub8_2", taskId = "task8", title = "Android –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", isCompleted = false),
                Subtask(id = "sub8_3", taskId = "task8", title = "Jetpack Compose", isCompleted = false),
                Subtask(id = "sub8_4", taskId = "task8", title = "Material Design", isCompleted = false),
                Subtask(id = "sub8_5", taskId = "task8", title = "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã", isCompleted = false)
            ),
            tags = listOf(tags[6]) // —É—á–µ–±–∞
        ),

        // –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        Task(
            id = "task9",
            title = "–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            categoryId = "cat_personal",
            creationDate = now - 10 * oneDayMillis,
            priority = TaskPriority.LOW,
            status = TaskStatus.ACTIVE,
            eisenhowerQuadrant = 4, // –Ω–µ –≤–∞–∂–Ω–æ –∏ –Ω–µ —Å—Ä–æ—á–Ω–æ
            tags = listOf(tags[1], tags[6]) // –ª–∏—á–Ω–æ–µ, —É—á–µ–±–∞
        ),

        // –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è
        Task(
            id = "task10",
            title = "–°—Ä–æ—á–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É",
            description = "–û–±—Å—É–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ",
            categoryId = "cat_work",
            creationDate = now - 2 * 3600000, // —Å–æ–∑–¥–∞–Ω–æ 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            dueDate = now,
            dueTime = "17:30",
            priority = TaskPriority.HIGH,
            status = TaskStatus.ACTIVE,
            eisenhowerQuadrant = 1, // –≤–∞–∂–Ω–æ –∏ —Å—Ä–æ—á–Ω–æ
            tags = listOf(tags[0], tags[3], tags[4]) // —Ä–∞–±–æ—Ç–∞, —Å—Ä–æ—á–Ω–æ, –≤–∞–∂–Ω–æ
        ),

        // –ó–∞–¥–∞—á–∏ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
        Task(
            id = "task11",
            title = "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã",
            categoryId = "cat_work",
            creationDate = now - 20 * oneDayMillis,
            dueDate = now + 2 * oneDayMillis,
            dueTime = "10:00",
            duration = 60,
            priority = TaskPriority.MEDIUM,
            status = TaskStatus.ACTIVE,
            eisenhowerQuadrant = 2,
            tags = listOf(tags[0]), // —Ä–∞–±–æ—Ç–∞
            recurrence = TaskRecurrence(
                id = "rec2",
                taskId = "task11",
                RecurrenceType.WEEKLY, // –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
                daysOfWeek = listOf(2), // –≤—Ç–æ—Ä–Ω–∏–∫
                startDate = now - 20 * oneDayMillis
            )
        ),

        // –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
        Task(
            id = "task12",
            title = "–†–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            categoryId = "cat_home",
            creationDate = now - 25 * oneDayMillis,
            priority = TaskPriority.LOW,
            status = TaskStatus.ACTIVE,
            eisenhowerQuadrant = 4, // –Ω–µ –≤–∞–∂–Ω–æ –∏ –Ω–µ —Å—Ä–æ—á–Ω–æ
            tags = listOf(tags[1], tags[5]) // –ª–∏—á–Ω–æ–µ, –¥–æ–º
        )
    )

    val datesWithTasks = tasks
        .mapNotNull { task -> task.dueDate?.let { LocalDate.ofEpochDay(it / (24 * 60 * 60 * 1000)) } }
        .toSet()
}

@Preview(name = "Task Item", showBackground = true)
@Composable
fun PreviewTaskItem() {
    DHbtTheme {
        Surface(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            TaskItem(
                task = PreviewData.tasks[0],
                onTaskClick = {},
                onTaskStatusChange = { _, _ -> },
                onTaskDelete = {},
                onTaskArchive = {}
            )
        }
    }
}

@Preview(name = "Task Item Compact", showBackground = true)
@Composable
fun PreviewTaskItemCompact() {
    DHbtTheme {
        Surface(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
        ) {
            TaskItemCompact(
                task = PreviewData.tasks[0],
                onTaskClick = {},
                onTaskStatusChange = { _, _ -> }
            )
        }
    }
}

@Preview(name = "Calendar", showBackground = true)
@Composable
fun PreviewCalendar() {
    DHbtTheme {
        Surface(color = MaterialTheme.colorScheme.background) {
            TaskCalendarSimple(
                isExpanded = true,
                onExpandToggle = {},
                selectedDate = LocalDate.now(),
                onDateSelected = {},
                datesWithTasks = PreviewData.datesWithTasks
            )
        }
    }
}

@Preview(name = "Categories Filter", showBackground = true)
@Composable
fun PreviewCategoriesFilter() {
    DHbtTheme {
        CategoryFilterRow(
            categories = PreviewData.categories,
            selectedCategoryId = "cat1",
            onCategorySelected = {}
        )
    }
}

@Preview(name = "Sort Options Menu", showBackground = true)
@Composable
fun PreviewSortMenu() {
    DHbtTheme {
        SortOptionsMenu(
            currentSortOption = SortOption.DATE_ASC,
            onSortOptionSelected = {}
        )
    }
}

@Preview(name = "EisenhowerMatrix", showBackground = true)
@Composable
fun PreviewEisenhowerMatrix() {
    DHbtTheme {
        EisenhowerMatrix(
            tasks = PreviewData.tasks.filter { it.eisenhowerQuadrant != null },
            onTaskClick = {},
            onTaskStatusChange = { _, _ -> },
            onTaskDelete = {}
        )
    }
}

@Preview(name = "Task Tag", showBackground = true)
@Composable
fun PreviewTaskTag() {
    DHbtTheme {
        Surface(color = MaterialTheme.colorScheme.background) {
            TaskTag(tag = PreviewData.tags[0])
        }
    }
}

@Preview(name = "Filter Dialog", showBackground = true)
@Composable
fun PreviewFilterDialog() {
    DHbtTheme {
        FilterDialog(
            onDismiss = {},
            currentStatus = TaskStatus.ACTIVE,
            onStatusSelected = {},
            currentPriority = TaskPriority.HIGH,
            onPrioritySelected = {},
            tags = PreviewData.tags,
            selectedTagIds = listOf("tag1"),
            onTagSelected = {},
            searchQuery = "–∑–∞–ø—Ä–æ—Å",
            onSearchQueryChanged = {}
        )
    }
}

// –ó–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å –º–æ–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
@Preview(name = "Tasks Screen", showBackground = true)
@Composable
fun PreviewTasksScreen() {
    DHbtTheme {
        TasksScreenPreview()
    }
}

// –ò–º–∏—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ViewModel
@Composable
fun TasksScreenPreview() {
    val tasks = PreviewData.tasks
    val categories = PreviewData.categories
    val tags = PreviewData.tags
    val datesWithTasks = PreviewData.datesWithTasks

    Surface(
        modifier = Modifier.fillMaxSize(),
        color = MaterialTheme.colorScheme.background
    ) {
        Column(modifier = Modifier.fillMaxSize()) {
            // –¢–æ–ø –±–∞—Ä
            TasksTopAppBar(
                onSearchClicked = {},
                onSortClicked = {},
                isFiltersActive = true,
                onResetFilters = {},
                onToggleEisenhowerMatrix = {},
                showEisenhowerMatrix = false
            )

            // –ö–∞–ª–µ–Ω–¥–∞—Ä—å
            TaskCalendarSimple(
                isExpanded = false,
                onExpandToggle = {},
                selectedDate = LocalDate.now(),
                onDateSelected = {},
                datesWithTasks = datesWithTasks
            )

            // –§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            CategoryFilterRow(
                categories = categories,
                selectedCategoryId = "cat1",
                onCategorySelected = {}
            )

            // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            TasksList(
                tasks = tasks,
                onTaskClick = {},
                onTaskStatusChange = { _, _ -> },
                onTaskDelete = {},
                onTaskArchive = {}
            )
        }
    }
}

@Preview(name = "Tasks Screen - Empty", showBackground = true)
@Composable
fun PreviewTasksScreenEmpty() {
    DHbtTheme {
        Surface(
            modifier = Modifier.fillMaxSize(),
            color = MaterialTheme.colorScheme.background
        ) {
            Column(modifier = Modifier.fillMaxSize()) {
                TasksTopAppBar(
                    onSearchClicked = {},
                    onSortClicked = {},
                    isFiltersActive = false,
                    onResetFilters = {},
                    onToggleEisenhowerMatrix = {},
                    showEisenhowerMatrix = false
                )

                TaskCalendarSimple(
                    isExpanded = false,
                    onExpandToggle = {},
                    selectedDate = null,
                    onDateSelected = {},
                    datesWithTasks = emptySet()
                )


            }
        }
    }
}

@Preview(name = "Tasks Screen - Eisenhower Matrix", showBackground = true)
@Composable
fun PreviewTasksScreenEisenhower() {
    DHbtTheme {
        Surface(
            modifier = Modifier.fillMaxSize(),
            color = MaterialTheme.colorScheme.background
        ) {
            Column(modifier = Modifier.fillMaxSize()) {
                TasksTopAppBar(
                    onSearchClicked = {},
                    onSortClicked = {},
                    isFiltersActive = false,
                    onResetFilters = {},
                    onToggleEisenhowerMatrix = {},
                    showEisenhowerMatrix = true
                )

                EisenhowerMatrix(
                    tasks = PreviewData.tasks.filter { it.eisenhowerQuadrant != null },
                    onTaskClick = {},
                    onTaskStatusChange = { _, _ -> },
                    onTaskDelete = {}
                )
            }
        }
    }
}