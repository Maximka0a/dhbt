package com.example.dhbt.presentation.dashboard

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.dhbt.R
import com.example.dhbt.domain.model.*
import com.example.dhbt.presentation.components.TaskCard
import com.example.dhbt.presentation.theme.DHbtTheme
import java.util.*
import java.util.concurrent.TimeUnit

@Preview(showBackground = true)
@Composable
fun DashboardScreenPreview() {
    val mockTasks = listOf(
        Task(
            id = "1",
            title = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
            description = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
            creationDate = System.currentTimeMillis(),
            dueDate = System.currentTimeMillis() + TimeUnit.HOURS.toMillis(5),
            dueTime = "17:30",
            priority = TaskPriority.HIGH,
            status = TaskStatus.ACTIVE
        ),
        Task(
            id = "2",
            title = "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
            description = "–û–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
            creationDate = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(1),
            dueDate = System.currentTimeMillis() + TimeUnit.HOURS.toMillis(3),
            dueTime = "15:00",
            priority = TaskPriority.MEDIUM,
            status = TaskStatus.ACTIVE
        ),
        Task(
            id = "3",
            title = "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
            description = "–ú–æ–ª–æ–∫–æ, —Ö–ª–µ–±, —è–π—Ü–∞, —Ñ—Ä—É–∫—Ç—ã",
            creationDate = System.currentTimeMillis() - TimeUnit.DAYS.toMillis(2),
            dueDate = System.currentTimeMillis() - TimeUnit.HOURS.toMillis(2),
            priority = TaskPriority.LOW,
            status = TaskStatus.ACTIVE,
            subtasks = listOf(
                Subtask("sub1", "3", "–ú–æ–ª–æ–∫–æ", true),
                Subtask("sub2", "3", "–•–ª–µ–±", false),
                Subtask("sub3", "3", "–Ø–π—Ü–∞", false)
            )
        )
    )

    val mockHabits = listOf(
        Habit(
            id = "1",
            title = "–ú–µ–¥–∏—Ç–∞—Ü–∏—è",
            description = "10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
            iconEmoji = "üßò",
            color = "#9C27B0",
            creationDate = System.currentTimeMillis(),
            type = HabitType.BINARY,
            currentStreak = 3,
            bestStreak = 5,
            status = HabitStatus.ACTIVE,
            frequency = HabitFrequency(
                id = "f1",
                habitId = "1",
                type = FrequencyType.DAILY
            )
        ),
        Habit(
            id = "2",
            title = "–í—ã–ø–∏–≤–∞—Ç—å –≤–æ–¥—É",
            description = "8 —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
            iconEmoji = "üíß",
            color = "#2196F3",
            creationDate = System.currentTimeMillis(),
            type = HabitType.QUANTITY,
            targetValue = 8f,
            unitOfMeasurement = "—Å—Ç–∞–∫–∞–Ω–æ–≤",
            currentStreak = 5,
            bestStreak = 8,
            status = HabitStatus.ACTIVE,
            frequency = HabitFrequency(
                id = "f2",
                habitId = "2",
                type = FrequencyType.DAILY
            )
        ),
        Habit(
            id = "3",
            title = "–ë–µ–≥",
            description = "30 –º–∏–Ω—É—Ç –±–µ–≥–∞",
            iconEmoji = "üèÉ",
            color = "#4CAF50",
            creationDate = System.currentTimeMillis(),
            type = HabitType.TIME,
            targetValue = 30f,
            currentStreak = 15,
            bestStreak = 20,
            status = HabitStatus.ACTIVE,
            frequency = HabitFrequency(
                id = "f3",
                habitId = "3",
                type = FrequencyType.SPECIFIC_DAYS,
                daysOfWeek = listOf(1, 3, 5)
            )
        )
    )

    val mockState = DashboardState(
        isLoading = false,
        userData = UserData(name = "–ú–∞–∫—Å–∏–º"),
        todayTasks = mockTasks,
        todayHabits = mockHabits,
        completedTasks = 1,
        totalTasks = mockTasks.size,
        completedHabits = 1,
        totalHabits = mockHabits.size
    )

    DHbtTheme {
        DashboardScreenPreviewContent(
            state = mockState,
            onTaskClick = {},
            onHabitClick = {},
            onAddTask = {},
            onAddHabit = {},
            onViewAllTasks = {},
            onViewAllHabits = {},
            onTaskCheckedChange = { _, _ -> },
            onDeleteTask = {},
            onHabitProgressIncrement = {}
        )
    }
}

@Composable
fun DashboardScreenPreviewContent(
    state: DashboardState,
    onTaskClick: (String) -> Unit,
    onHabitClick: (String) -> Unit,
    onAddTask: () -> Unit,
    onAddHabit: () -> Unit,
    onViewAllTasks: () -> Unit,
    onViewAllHabits: () -> Unit,
    onTaskCheckedChange: (String, Boolean) -> Unit,
    onDeleteTask: (String) -> Unit,
    onHabitProgressIncrement: (String) -> Unit
) {
    val snackbarHostState = remember { SnackbarHostState() }

    Scaffold(
        topBar = {
            DashboardTopAppBar(
                userName = state.userData?.name ?: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                formattedDate = "19 –º–∞—Ä—Ç–∞" // –•–∞—Ä–¥–∫–æ–¥–∏–º –¥–ª—è –ø—Ä–µ–≤—å—é
            )
        },
        floatingActionButton = {
            DashboardFab(
                onAddTask = onAddTask,
                onAddHabit = onAddHabit
            )
        },
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            item {
                StatisticsCard(
                    completedTasks = state.completedTasks,
                    totalTasks = state.totalTasks,
                    completedHabits = state.completedHabits,
                    totalHabits = state.totalHabits
                )
            }

            // –ü—Ä–∏–≤—ã—á–∫–∏
            item {
                SectionHeader(
                    title = stringResource(R.string.habits_for_today),
                    onSeeAllClick = onViewAllHabits
                )
            }

            item {
                if (state.todayHabits.isEmpty()) {
                    EmptyStateMessage(message = stringResource(R.string.no_habits_for_today))
                } else {
                    HabitsRow(
                        habits = state.todayHabits,
                        onHabitClick = onHabitClick,
                        onHabitProgressIncrement = onHabitProgressIncrement
                    )
                }
            }

            // –ó–∞–¥–∞—á–∏
            item {
                SectionHeader(
                    title = stringResource(R.string.tasks_for_today),
                    onSeeAllClick = onViewAllTasks
                )
            }

            if (state.todayTasks.isEmpty()) {
                item {
                    EmptyStateMessage(message = stringResource(R.string.no_tasks_for_today))
                }
            } else {
                items(state.todayTasks) { task ->
                    TaskCard(
                        task = task,
                        onTaskClick = { onTaskClick(task.id) },
                        onCompleteToggle = { _, isCompleted ->
                            onTaskCheckedChange(task.id, isCompleted)
                        }
                    )
                }
            }

            // –î–æ–ø. –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è FAB
            item {
                Spacer(modifier = Modifier.height(80.dp))
            }
        }
    }
}